// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* id_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  id_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* id_ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  id_ret_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protos_2eproto() {
  protobuf_AddDesc_protos_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protos.proto");
  GOOGLE_CHECK(file != NULL);
  id_req_descriptor_ = file->message_type(0);
  static const int id_req_offsets_[1] = {
  };
  id_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      id_req_descriptor_,
      id_req::default_instance_,
      id_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(id_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(id_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(id_req));
  id_ret_descriptor_ = file->message_type(1);
  static const int id_ret_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(id_ret, id_),
  };
  id_ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      id_ret_descriptor_,
      id_ret::default_instance_,
      id_ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(id_ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(id_ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(id_ret));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protos_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    id_req_descriptor_, &id_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    id_ret_descriptor_, &id_ret::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protos_2eproto() {
  delete id_req::default_instance_;
  delete id_req_reflection_;
  delete id_ret::default_instance_;
  delete id_ret_reflection_;
}

void protobuf_AddDesc_protos_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014protos.proto\022\005proto\"\010\n\006id_req\"\024\n\006id_re"
    "t\022\n\n\002id\030\001 \001(\r", 53);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protos.proto", &protobuf_RegisterTypes);
  id_req::default_instance_ = new id_req();
  id_ret::default_instance_ = new id_ret();
  id_req::default_instance_->InitAsDefaultInstance();
  id_ret::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protos_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protos_2eproto {
  StaticDescriptorInitializer_protos_2eproto() {
    protobuf_AddDesc_protos_2eproto();
  }
} static_descriptor_initializer_protos_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

id_req::id_req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.id_req)
}

void id_req::InitAsDefaultInstance() {
}

id_req::id_req(const id_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.id_req)
}

void id_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

id_req::~id_req() {
  // @@protoc_insertion_point(destructor:proto.id_req)
  SharedDtor();
}

void id_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void id_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* id_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return id_req_descriptor_;
}

const id_req& id_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2eproto();
  return *default_instance_;
}

id_req* id_req::default_instance_ = NULL;

id_req* id_req::New() const {
  return new id_req;
}

void id_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool id_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.id_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.id_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.id_req)
  return false;
#undef DO_
}

void id_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.id_req)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.id_req)
}

::google::protobuf::uint8* id_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.id_req)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.id_req)
  return target;
}

int id_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void id_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const id_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const id_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void id_req::MergeFrom(const id_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void id_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void id_req::CopyFrom(const id_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool id_req::IsInitialized() const {

  return true;
}

void id_req::Swap(id_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata id_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = id_req_descriptor_;
  metadata.reflection = id_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int id_ret::kIdFieldNumber;
#endif  // !_MSC_VER

id_ret::id_ret()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.id_ret)
}

void id_ret::InitAsDefaultInstance() {
}

id_ret::id_ret(const id_ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.id_ret)
}

void id_ret::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

id_ret::~id_ret() {
  // @@protoc_insertion_point(destructor:proto.id_ret)
  SharedDtor();
}

void id_ret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void id_ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* id_ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return id_ret_descriptor_;
}

const id_ret& id_ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2eproto();
  return *default_instance_;
}

id_ret* id_ret::default_instance_ = NULL;

id_ret* id_ret::New() const {
  return new id_ret;
}

void id_ret::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool id_ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.id_ret)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.id_ret)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.id_ret)
  return false;
#undef DO_
}

void id_ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.id_ret)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.id_ret)
}

::google::protobuf::uint8* id_ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.id_ret)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.id_ret)
  return target;
}

int id_ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void id_ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const id_ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const id_ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void id_ret::MergeFrom(const id_ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void id_ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void id_ret::CopyFrom(const id_ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool id_ret::IsInitialized() const {

  return true;
}

void id_ret::Swap(id_ret* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata id_ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = id_ret_descriptor_;
  metadata.reflection = id_ret_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
